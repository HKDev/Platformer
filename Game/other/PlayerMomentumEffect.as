package other{		// assets	import core.Assets;	import core.State;		import org.flixel.FlxG;		import org.flixel.FlxSprite;	import org.flixel.FlxGroup;	import flash.utils.Timer;	import flash.events.TimerEvent;	import org.flixel.FlxBasic;	public class PlayerMomentumEffect extends FlxSprite	{		private var _player:FlxSprite;			public var cloneGrp:FlxGroup;			public var fadeSpeed:Number;		public var cloneDelay:int;		public var cloneQty:int;				public function PlayerMomentumEffect()		{			super(x,y);			_player = State.player as FlxSprite;			cloneGrp = new FlxGroup();				}		public function added(bool:Boolean):void { 			if(bool) 				FlxG.state.add(cloneGrp);			else 				FlxG.state.remove(cloneGrp);		}		public function create(fadeSpeed:Number, cloneDelay:Number, cloneQty:int):void  {			this.fadeSpeed = fadeSpeed;			this.cloneDelay = cloneDelay;			this.cloneQty = cloneQty;			var cloneTimer:Timer = new Timer(cloneDelay, cloneQty);			cloneTimer.addEventListener(TimerEvent.TIMER,clone,false,0,true);			cloneTimer.start();			}				private function clone(e:TimerEvent):void { 			var playerClone:FlxSprite = new FlxSprite(0,0,null);			playerClone.pixels = _player.framePixels;			playerClone.x = _player.x;			playerClone.y = _player.y;						cloneGrp.add(playerClone);		}					override public function update():void		{			var thisClone:FlxSprite = cloneGrp.getFirstAlive() as FlxSprite;			if(thisClone != null) { 				if(thisClone.alpha > 0) thisClone.alpha -= fadeSpeed;								else {					thisClone.kill();					cloneGrp.remove(thisClone);					// lets reuse the copies after the first creation.. havent added but will be adding that. 				}						}			if(this.finished)			{				this.kill();				trace("Killed Momentum Effect!");			}			super.update();		}	}}